function buildDecorations(view, diffResult, side) {
    let builder = new RangeSetBuilder();

    for (const part of diffResult.lines) {
        const lineNumber = (side === "left") ? part.aIndex : part.bIndex;

        if (lineNumber < 0) continue;

        const line = view.state.doc.line(lineNumber + 1);

        // Handle full-line insert/delete
        if ((side === "left" && part.bIndex === -1) || (side === "right" && part.aIndex === -1)) {
            const className = side === "left" ? "line-deleted" : "line-inserted";
            builder.add(line.from, line.from, Decoration.line({ class: className }));
            continue;
        }

        // If line exists in both but was changed, apply word diff
        if (part.aIndex >= 0 && part.bIndex >= 0 && part.lineA !== part.lineB) {
            const diffs = diffWords(part.lineA, part.lineB);
            let pos = line.from;

            for (const token of diffs) {
                const len = token.value.length;

                if (len === 0) continue;

                const shouldMark =
                    (side === "left" && token.removed) ||
                    (side === "right" && token.added);

                if (shouldMark) {
                    builder.add(pos, pos + len, Decoration.mark({
                        class: token.added ? "word-inserted" : "word-deleted"
                    }));
                }

                // Only advance for non-removed tokens
                if (!(side === "left" && token.added)) {
                    pos += len;
                }
            }
        }
    }

    return builder.finish();
}
